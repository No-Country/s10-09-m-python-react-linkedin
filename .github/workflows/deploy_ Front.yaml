
name: Deploy to Amazon ECS Frontend

on:
  workflow_dispatch:

env:
  AWS_REGION: us-west-2                   
  ECR_REPOSITORY: frontend          
  ECS_SERVICE: serverfrontend                  
  ECS_CLUSTER: demo-deploy                 
  ECS_TASK_DEFINITION: .github/workflows/task-definition-front.json                                              
  CONTAINER_NAME: frontend           
                                               
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build and push frontend Docker image
      env:
        ECR_REGISTRY: 411951638844.dkr.ecr.us-west-2.amazonaws.com         
      run: |          
          docker build --no-cache -t frontend ./WorkWave_client
          docker tag frontend $ECR_REGISTRY/frontend:latest
          docker push $ECR_REGISTRY/frontend:latest    
     

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: 236649525998.dkr.ecr.us-west-2.amazonaws.com/frontend:latest

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
