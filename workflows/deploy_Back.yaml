name: Deploy to Amazon ECS backend

on:
  workflow_dispatch:

env:
  AWS_REGION: MY_AWS_REGION                   
  ECR_REPOSITORY: MY_ECR_REPOSITORY           
  ECS_SERVICE: MY_ECS_SERVICE                 
  ECS_CLUSTER: MY_ECS_CLUSTER                 
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION 
                                              
  CONTAINER_NAME: MY_CONTAINER_NAME           
                                               
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Cleanup old images in backend ECR
        env:
          AWS_REGION: us-west-2
          ECR_REPOSITORY_NAME: server 
          IMAGE_TAG: ${{v1}}  # Cambia esto por la etiqueta de la imagen que quieres eliminar (en este caso, v1)
        run: |
          
          # Get the list of images in the repository
          IMAGES=$(aws ecr list-images --repository-name $ECR_REPOSITORY_NAME --query 'imageIds[*].imageTag' --output text)
          
          # Check if the current image tag already exists in the repository
          if echo "$IMAGES" | grep -q "$IMAGE_TAG"; then
            # Delete the old image
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY_NAME --image-ids imageTag=$IMAGE_TAG
          fi

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{v1}}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true